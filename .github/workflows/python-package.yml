name: Python package

on:
  push:
    tags:
      - '*'
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Build distribution 📦
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12", "3.13"]

    steps:
    - uses: actions/checkout@v4
      with:
        persist-credentials: false
        ref: ${{ github.ref }}

    - name: GitHubAction Info
      run: |
        echo "--> github.ref_name: ${{ github.ref_name }}"
        echo "--> matrix.python-version: ${{ matrix.python-version }}"

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: '${{ matrix.python-version }}'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install hatch pytest pytest-flake8 flake8 versioningit hatchling
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint sources with flake8
      run: |
        flake8 . -v
    - name: Build package 📦
      run: |
        hatchling build
    - name: Run and Lint tests
      run: |
        pytest --flake8
    - name: Store the distribution package for Python ${{ matrix.python-version }}
      uses: actions/upload-artifact@v4
      with:
        name: eaps2000-py${{ matrix.python-version }}-${{ github.run_id }}-${{ github.run_number }}
        path: dist/

  publish-to-pypi:
    name: >-
      Publish Python 🐍 distribution 📦 to PyPI
    if: startsWith(github.ref, 'refs/tags/')  # only publish to PyPI on tag pushes
    needs:
    - build
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]

    environment:
      name: pypi
      url: https://pypi.org/p/eaps2000  # Replace <package-name> with your PyPI project name
    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing

    steps:
    - name: Download all the dists
      uses: actions/download-artifact@v4
      with:
        name: eaps2000-py${{ matrix.python-version }}-${{ github.run_id }}-${{ github.run_number }}
        path: dist/
    - name: Publish distribution 📦 to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1

  github-release:
    name: >-
      Sign the Python 🐍 distribution 📦 with Sigstore
      and upload them to GitHub Release
    needs:
    - publish-to-pypi
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12", "3.13"]

    permissions:
      contents: write  # IMPORTANT: mandatory for making GitHub Releases
      id-token: write  # IMPORTANT: mandatory for sigstore

    steps:
    - name: Download all the dists
      uses: actions/download-artifact@v4
      with:
        name: eaps2000-py${{ matrix.python-version }}-${{ github.run_id }}-${{ github.run_number }}
        path: dist/
    - name: Sign the dists with Sigstore
      uses: sigstore/gh-action-sigstore-python@v3.0.0
      with:
        inputs: >-
          ./dist/*.tar.gz
          ./dist/*.whl
    - name: Create GitHub Release
      env:
        GITHUB_TOKEN: ${{ github.token }}
      run: >-
        gh release create
        "$GITHUB_REF_NAME"
        --repo "$GITHUB_REPOSITORY"
        --notes ""
    - name: Upload artifact signatures to GitHub Release
      env:
        GITHUB_TOKEN: ${{ github.token }}
      # Upload to GitHub Release using the `gh` CLI.
      # `dist/` contains the built packages, and the
      # sigstore-produced signatures and certificates.
      run: >-
        gh release upload
        "$GITHUB_REF_NAME" dist/**
        --repo "$GITHUB_REPOSITORY"
